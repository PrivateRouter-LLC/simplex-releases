name: Build Latest SimpleXMQ Tagged Release

# This allows us to call this build from a url request if the type(s) matches
on:
  repository_dispatch:
    types: build-tag

jobs:
  # Gets the latest tag info from the SimpleX Repo and set the variables for other jobs to use
  get_info:
    runs-on: ubuntu-latest
    outputs:
      LATEST_TAG: ${{ env.LATEST_TAG }}
      LATEST_SHA: ${{ env.LATEST_SHA }}
      TARBALL_URL: ${{ env.TARBALL_URL }}

    steps:
      - name: Set environment variables
        run: |
          GIT_DATA=$(curl --silent https://api.github.com/repos/simplex-chat/simplexmq/tags\?per_page\=1)
          echo "LATEST_TAG=$(echo ${GIT_DATA} | jq -r '.[].name')" >> $GITHUB_ENV
          echo "LATEST_SHA=$(echo ${GIT_DATA} | jq -r '.[].commit.sha')" >> $GITHUB_ENV
          echo "TARBALL_URL=$(echo ${GIT_DATA} | jq -r '.[].tarball_url')" >> $GITHUB_ENV

  # Uses the data from get_info to have the docker container build our simplexmq binary
  build_simplex:
    runs-on: ${{ matrix.target.arch }}
    needs: get_info
    strategy:
      matrix:
        target: [ { 'os': 'linux', 'arch': 'arm64' }, { 'os': 'linux', 'arch': 'arm' }, { 'os': 'linux', 'arch': 'amd64' } ]

    steps:
      # Self hosted runner so must clean up from previous runs
      - name: Cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      # Self hosted runner so must clean up from previous runs
      - name: Cleanup Docker
        run: |
          docker system prune -a -f

      # Checkout our repo from GitHub
      - name: Checkout Repository
        uses: actions/checkout@v3  

      # Using Docker we compile using the .tar.gz from SimpleX's latest Tagged Release
      - name: Build SimpleX
        run: |
          docker build -t simplex-build --no-cache --build-arg TARBALL_URL="${{ needs.get_info.outputs.TARBALL_URL }}" .
          docker create --name simplex-binaries simplex-build
          docker cp simplex-binaries:/bins .
          docker rm simplex-binaries
          docker image rm simplex-build

      # Create our .tar.gz from the Docker build output
      - name: Create Tarball From Docker Build
        run: |
          tar cfvz simplexmq-${{ matrix.target.os }}_${{ matrix.target.arch }}.tar.gz -C bins .

      # Upload our created Tarball to GitHub to be used in the Release
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: simplexmq_${{ matrix.target.os }}_${{ matrix.target.arch }}
          path: simplexmq-${{ matrix.target.os }}_${{ matrix.target.arch }}.tar.gz 

  # Create the release on GitHub for other projects to pull from
  setup_release:
    runs-on: ubuntu-latest
    needs: [ get_info, build_simplex ]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      # Checkout our repo from GitHub
      - name: Checkout Repository
        uses: actions/checkout@v3

      # If a tagged release for this version already exists, delete it
      - name: Delete Any Duplicate Existing Release
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 0
          delete_tag_pattern: ${{ needs.get_info.outputs.LATEST_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create our release
      - name: Create Release With Info
        uses: ncipollo/release-action@v1
        id: create_release
        with:
          body: |
            # SimpleXMQ Builds Provided by PrivateRouter
            [![PrivateRouter Logo](https://privaterouter.com/wp-content/uploads/2020/08/phox-logo-1.png)](https://privaterouter.com)

            [PrivateRouter](https://privaterouter.com) offers solutions tailored for security and self-reliance from the cloud including [Reverse Proxy](https://privaterouter.com/reverse-proxy/) and [self hosting hardware](https://privaterouter.com/shop/).

            # SimpleX Chat
            [![SimpleX Logo](https://simplex.chat/img/simplex.svg)](https://simplex.chat/)

            [SimpleX Chat - Private & encrypted - the only platform without user identifiers!](https://simplex.chat/)

            # Build Information
            * SimpleXMQ Release ${{ needs.get_info.outputs.LATEST_TAG }}
            * [Compiled From Tag ${{ needs.get_info.outputs.LATEST_TAG }} Source](${{ needs.get_info.outputs.TARBALL_URL }})
            * [Direct Link To SimpleXMQ Repo](https://github.com/simplex-chat/simplexmq)
          tag: ${{ needs.get_info.outputs.LATEST_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Iterates over all of our architectures and adds the built binaries to the release
  add_release_files:
    runs-on: ubuntu-latest
    needs: [ build_simplex, setup_release ]
    strategy:
      matrix:
        target: [ { 'os': 'linux', 'arch': 'arm64' }, { 'os': 'linux', 'arch': 'arm' }, { 'os': 'linux', 'arch': 'amd64' } ]

    steps:
      # Checkout our repo from GitHub
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Download artifacts from our above compile jobs
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: simplexmq_${{ matrix.target.os }}_${{ matrix.target.arch }}

      # Add the downloaded file to the release
      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup_release.outputs.upload_url }}
          asset_path: ./simplexmq-${{ matrix.target.os }}_${{ matrix.target.arch }}.tar.gz
          asset_name: simplexmq-${{ matrix.target.os }}_${{ matrix.target.arch }}.tar.gz
          asset_content_type: application/x-tar
